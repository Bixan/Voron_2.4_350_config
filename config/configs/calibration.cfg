#####################################################################
# 各种调试宏脚本
#####################################################################

## PID加热棒测试
[gcode_macro PID_HOTEND]
description: PID加热棒测试。使用方法：PID_HOTEND
gcode:
  M106 S64                                     #模型风扇转速25%
  PID_CALIBRATE HEATER=extruder TARGET=245     #目标温度245度

## PID热床测试
[gcode_macro PID_BED]
description: PID热床测试。使用方法：PID_BED
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=100   #目标温度100度

## 测试电机是否正常运转
[gcode_macro TEST_STEPPER]
description: 测试电机是否正常运转及运转方向是否正常。使用方法：TEST_STEPPER STEPPER=x
gcode:
  {% set stepper = params.STEPPER|default(输入电机名称)|lower %}
  M118 即将测试{stepper}轴电机运转情况
  {% if stepper in ["x","y"] %}
    M118 请从{stepper}传动轮正面观察并确认，是否先左后右摆动
  {% endif %}
  {% if stepper in ["z","z1","z2","z3"] %}
    M118 请从{stepper}轴滑块固定处观察并确认，是否先上后下移动
  {% endif %}
  STEPPER_BUZZ STEPPER=stepper_{stepper}
  M118 {stepper}轴电机运转测试完毕

## 一次性测试电机是否正常运转
[gcode_macro TEST_ALL_STEPPERS]
description: 一次性测试电机是否正常运转。使用方法：TEST_ALL_STEPPERS
gcode:    
  M118 请从X传动轮正上方观察并确认，是否先顺时针后逆时针摆动
  G4 S3
  STEPPER_BUZZ STEPPER=stepper_x            #测试X电机
  M118 请从Y传动轮正上方观察并确认，是否先顺时针后逆时针摆动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_y            #测试Y电机
  M118 请从Z轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z            #测试Z电机
  M118 请从Z1轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z1           #测试Z1电机
  M118 请从Z2轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z2           #测试Z2电机
  M118 请从Z3轴滑块固定处观察并确认，是否先上后下移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z3           #测试Z3电机

## 测试PROBE稳定性
[gcode_macro PROBE_ACCURACY_TEST]
description: 测试PROBE稳定性，首次安装的TAP，PROBE_SAMPLES输入100，再次测试不需要输入值
gcode:
  {% set probe_speed = params.PROBE_SPEED|default(5)|float %}
  {% set probe_samples = params.PROBE_SAMPLES|default(10)|int %}
  G28
  PROBE_ACCURACY PROBE_SPEED={probe_speed} SAMPLES={probe_samples}

## 手动Z偏移调整
[gcode_macro PROBE_CALIBRATE_NEW]
description: 手动Z偏移调整
gcode:
  G28
  QGL
  G28 Z
  PROBE_CALIBRATE

## 设置XY电机运转电流
[gcode_macro SET_XY_STEPPERS_CURRENT]
description: 设置XY电机运转电流。使用方法：SET_XY_STEPPERS_CURRENT CURRENT=0.8
gcode:
  {% set current = params.CURRENT|default(输入电机电流)|float %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current}

## 设置Z电机运转电流
[gcode_macro SET_Z_STEPPERS_CURRENT]
description: 设置Z电机运转电流。使用方法：SET_Z_STEPPERS_CURRENT CURRENT=0.8
gcode:
  {% set current = params.CURRENT|default(输入电机电流)|float %}
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={current}


## 速度与丢步测试
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
description: 速度测试，使用方法 TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
