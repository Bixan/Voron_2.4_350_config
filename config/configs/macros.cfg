###############################
######    自定义宏脚本    ######
###############################

## 根据XYZ轴的情况判断是否需要进行G28归零
[gcode_macro _CG28]
description: 如果各轴未归零则执行归零操作，否则不执行归零
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}   # 判断已经归零的轴是否是XYZ
    STATUS_HOMING                                     # 设置logo灯颜色
    G28                                               # 执行归零
  {% endif %}

## 四Z调平
[gcode_macro QGL]
description: 四Z调平
gcode:
    G28                                # 归零
    STATUS_LEVELING                  # 设置logo灯颜色
    QUAD_GANTRY_LEVEL                # 四Z调平
    STATUS_HOMING                    # 设置logo灯颜色
    G28 Z                              # 重新进行Z归零，修复QGL造成的误差

## 自定义加速度
[gcode_macro M204]
description: Override the Marlin styled M204 command to set both acceleration and deceleration at the same time. 
rename_existing: M204.1
gcode:
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={s / 2.0}

## 重置挤出机
[gcode_macro _RESET_EXTRUDER]
gcode:
    G92 E0

## 根据仓温调整电机电流，未完全调试好
[gcode_macro _CHAMBER_CURRENT]
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

## 画线
[gcode_macro _PURGE_LINE]
description: 在打印区域的左边打印一条线，让挤出机做好准备
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP %}
    {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
    {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
    {% if print_min_x > 25 %}
        {% set line_start_x = print_min_x - 20 %}
        {% set line_end_x = print_min_x - 20 %}
        {% set line_start_y = print_min_y %}
        {% set line_end_y = print_min_y + 100 %}
    {% elif print_min_x < 25 and print_min_y > 25 %}
        {% set line_start_x = print_min_x %}
        {% set line_end_x = print_min_x + 100 %}
        {% set line_start_y = print_min_y - 20 %}
        {% set line_end_y = print_min_y - 20 %}
    {% endif %}
    G1 X{line_start_x} Y{line_start_y} Z5 F6000                               # 移动到准备位置
    M109 S{extruder_temp}                                                     # 等待热端到达指定温度
    G1 Z2 F1500                                                               # 下移喷嘴
    _RESET_EXTRUDER                                                         # 重置挤出机
    G1 E20 F150                                                               # 在原地挤出20mm耗材，黏住喷嘴上面的料
    _RESET_EXTRUDER                                                         # 重置挤出机
    G1 X{line_end_x} Y{line_end_y} Z0.25 F1500 E10                           # 画一条直线
    _RESET_EXTRUDER                                                         # 重置挤出机
    G1 Z2 F3000                                                               # 抬高喷嘴

## 打印开始前执行的宏
[gcode_macro PRINT_START]
description: 打印开始前进行的操作
# 在切片软件的开始G-CODE填入
# CURA 5.0：
# PRINT_START EXTRUDER={material_print_temperature_layer_0} BED={material_bed_temperature_layer_0} CHAMBER={build_volume_temperature} NOZZLE={machine_nozzle_size} FILAMENT={material_type} PRINT_MIN=%MINX%,%MINY% PRINT_MAX=%MAXX%,%MAXY%

# SuperSlicer：
# M190 S0
# M109 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode
# PRINT_START EXTRUDER={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} BED=[first_layer_bed_temperature] CHAMBER=[chamber_temperature] NOZZLE=[nozzle_diameter] FILAMENT=[filament_type] PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}

# Bambu:
# M190 S0
# M109 S0
# PRINT_START EXTRUDER=[nozzle_temperature_initial_layer] BED=[bed_temperature_initial_layer_single] CHAMBER=[chamber_temperature] NOZZLE={nozzle_diameter[0]} FILAMENT=[filament_type] PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}

gcode:
    CLEAR_PAUSE                                                                                             # 清空暂停缓存
    BED_MESH_CLEAR                                                                                          # 清除网床
    POWER_ON_HEATER_BED                                                                                    # 打开AC热床供电
    #LIGHT_ON                                                                                                 # 打开顶部照明灯
    SET_FAN_SPEED FAN=tmc_fan SPEED=0.4                                                                     # 开启驱动冷却风扇
    SET_FAN_SPEED FAN=motor_fan SPEED=0.4                                                                   # 开启XY电机冷却风扇
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(200)|int %}                                                # 从切片中获取打印头温度
    {% set BED_TEMP = params.BED|default(60)|int %}                                                           # 从切片中获取热床温度
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}                                                    # 从切片中获取仓温温度
    {% set FILAMENT_TYPE = params.FILAMENT|default("PLA")|string %}                                           # 从切片中获取耗材类型
    {% set NOZZLE_SIZE = params.NOZZLE|default(0.4)|int %}                                                    # 从切片中获取喷嘴大小
    STATUS_HEATING                                                                                          # 设置logo灯颜色
    #LIGHT_RED                                                                                                # 设置顶部灯光颜色
    M140 S{BED_TEMP}                                                                                         # 设置热床目标温度
    M104 S150                                                                                                # 设置打印头预热温度
    #TEMPERATURE_ADJUSTED_PRINT_START_SETTINGS                                                                # 开启内循环
    {% if CHAMBER_TEMP > 0 %}                                                                                 # 判断如果需要仓温则进行指定操作
      M106 S255                                                                                              # 模型散热风扇开到最大，辅助空气循环
      TEMPERATURE_WAIT SENSOR="temperature_sensor Toolhead_Broad" MINIMUM={CHAMBER_TEMP-10}                # 等待仓温到达指定温度
      M107                                                                                                   # 关闭模型散热风扇
    {% endif %}                                                                                               # 结束判断
    M190 S{BED_TEMP}                                                                                         # 等待热床到达指定温度
    #LIGHT_WHITE                                                                                              # 设置顶部灯光颜色
    QGL                                                                                                      # 龙门架调平
    STATUS_MESHING                                                                                         # 设置logo灯颜色
    BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} FORCE_NEW_MESH=True   # 区域床网探测
    STATUS_HEATING                                                                                         # 设置logo灯颜色
    MATERIAL_PA MATERIAL={FILAMENT_TYPE}                                                                    # 根据耗材调整PA值
    _PURGE_LINE EXTRUDER_TEMP={EXTRUDER_TEMP} PRINT_MIN={params.PRINT_MIN}                                # 打印测试线
    #M109 S{EXTRUDER_TEMP}                                                                                    # 等待打印头温度
    #_RESET_EXTRUDER                                                                                          # 重置挤出机
    STATUS_PRINTING                                                                                        # 设置logo灯颜色

## 打印结束后执行的宏
[gcode_macro PRINT_END]
description: 打印结束后进行的操作
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 5, th.axis_maximum.z]|min %}
    G90                                                                                                    # 切换到相对于原点的坐标系
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                                               # 抬高喷嘴避免烫坏打印件
    M400                                                                                                   # 等待缓存清空
    _RESET_EXTRUDER                                                                                      # 重置挤出机
    G1 E-5.0 F1800                                                                                         # 回抽5mm
    TURN_OFF_HEATERS                                                                                     # 关闭喷头加热
    G0 X{th.axis_maximum.x -5} Y{th.axis_maximum.y - 5} Z{th.position.z + 50 if th.position.z < 100 else z_safe} F3600        # 停到指定位置
    BED_MESH_CLEAR                                                                                        # 清除床网
    M84                                                                                                     # 关闭步进电机
    M107                                                                                                   # 关闭模型散热风扇
    #Nevermore_off                                                                                          # 关闭内循环
    G4 P5000
    POWER_OFF_HEATER_BED                                                                                 # 关闭AC热床电源
    SET_FAN_SPEED FAN=motor_fan SPEED=0                                                                   # 关闭电机散热风扇
    SET_FAN_SPEED FAN=tmc_fan SPEED=0                                                                     # 关闭驱动散热风扇

## 打印头停到前面
[gcode_macro PARKFRONT]
description: 打印头停到前面
gcode:
    #{% if printer.idle_timeout.state != "Printing" %}
        _CG28
        SAVE_GCODE_STATE NAME=park_front
        G90
        G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_minimum.y + 10} F30000
        RESTORE_GCODE_STATE NAME=park_front
    #{% else %}
    #    { action_respond_info("PARKFRONT disabled while printing!") }
    #{% endif %}

## 打印头停靠到中间
[gcode_macro PARKCENTER]
description: 打印头停靠到中间
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=part_center
    G90
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F30000
    RESTORE_GCODE_STATE NAME=part_center

## 打印头停靠到右后侧
[gcode_macro PARKREARRIGHT]
description: 打印头停靠到右后侧
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=park_rear_right
    G90
    G0 X{printer.toolhead.axis_maximum.x - 10} Y{printer.toolhead.axis_maximum.y - 10} F30000     
    RESTORE_GCODE_STATE NAME=park_rear_right

## 备份配置文件到GitHub
# 参考文档 https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
[gcode_shell_command backup_cfg]
command: sh /home/samuel/printer_data/config/scripts/git_backup.sh
timeout: 120.
verbose: True

[gcode_macro BACKUP_CFG]
description: 备份配置文件
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

## 在终端打印出Klipper变量
[gcode_macro DUMP_VARIABLES]
description: 在终端打印出Klipper变量，使用方法:[DUMP_VARIABLES NAME=stepper VALUE=extruder]，NAME表示变量名称包含的关键词，VALUE表示变量内容包含的关键，2个参数都是可选参数。
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

## 将单个变量的值和类型返回到终端。
[gcode_macro GET_VARIABLE]
description: 将单个变量的值和类型返回到终端。使用方法:[GET_VARIABLE NAME=toolhead]，NAME指定要检索的变量的名称，必填。
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}




